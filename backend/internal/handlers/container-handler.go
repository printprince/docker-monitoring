package handlers

import (
	"docker-monitoring/backend/internal/models"
	"docker-monitoring/backend/internal/repository"
	"encoding/json"
	"log"
	"net/http"
	"strings"
)

// ContainerHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
type ContainerHandler struct {
	Repo *repository.ContainerRepository
}

// NewContainerHandler - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
func NewContainerHandler(repo *repository.ContainerRepository) *ContainerHandler {
	return &ContainerHandler{Repo: repo}
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è JSON-–æ—Ç–≤–µ—Ç–æ–≤
func jsonResponse(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(data)
}

// GetContainers - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
func (h *ContainerHandler) GetContainers(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
	containers, err := h.Repo.GetAll()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: %v\n", err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"})
		return
	}
	jsonResponse(w, http.StatusOK, containers)
}

// GetContainer - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ ID
func (h *ContainerHandler) GetContainer(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ ID")

	pathParts := strings.Split(r.URL.Path, "/")
	if len(pathParts) < 3 || pathParts[2] == "" {
		log.Println("‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"})
		return
	}

	containerID := pathParts[2] // üî• ID —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞
	log.Printf("üîç –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ID=%s\n", containerID)

	container, err := h.Repo.GetByID(containerID) // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º string
	if err != nil {
		log.Printf("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: %v\n", err)
		jsonResponse(w, http.StatusNotFound, map[string]string{"error": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	jsonResponse(w, http.StatusOK, container)
}

// CreateContainer - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func (h *ContainerHandler) CreateContainer(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
	var container models.Container
	err := json.NewDecoder(r.Body).Decode(&container)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON"})
		return
	}

	log.Printf("üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %+v\n", container)
	err = h.Repo.Create(&container)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: %v\n", err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"})
		return
	}

	jsonResponse(w, http.StatusCreated, container)
}

// UpdateContainer - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func (h *ContainerHandler) UpdateContainer(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
	var container models.Container
	err := json.NewDecoder(r.Body).Decode(&container)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON"})
		return
	}

	log.Printf("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %+v\n", container)
	err = h.Repo.Update(&container)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %v\n", err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"})
		return
	}

	jsonResponse(w, http.StatusOK, container)
}

// DeleteContainer - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func (h *ContainerHandler) DeleteContainer(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")

	pathParts := strings.Split(r.URL.Path, "/")
	if len(pathParts) < 3 || pathParts[2] == "" {
		log.Println("‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
		jsonResponse(w, http.StatusBadRequest, map[string]string{"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"})
		return
	}

	containerID := pathParts[2]
	log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ID=%s\n", containerID)

	err := h.Repo.Delete(containerID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %v\n", err)
		jsonResponse(w, http.StatusInternalServerError, map[string]string{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"})
		return
	}

	jsonResponse(w, http.StatusOK, map[string]string{"message": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω"})
}
